include:
  - project: "devops/gitlab/ci-templates/general"
    file:
      - ".install_hashicorp_vault.yml"
      - ".vault_jwt_auth.yml"
  - project: "devops/gitlab/ci-templates/ruby"
    ref: "sans-dind"
    file:
      - ".rspec.yml"
      - ".rubocop.yml"
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"

stages:
  - test
  - deploy

rspec_app_test:
  stage: test
  image: ruby:3.2.2
  before_script:
    - bundle install -j $(nproc)
  extends:
    - .rspec
  tags:
    - build

rubocop_app_test:
  stage: test
  image: ruby:3.2.2
  before_script:
    - bundle install -j $(nproc)
  extends:
    - .rubocop
  tags:
    - build

# This step was inspired from Gitlab's example of gem publication:
# https://gitlab.com/gitlab-org/quality/pipeline-common/-/blob/master/ci/gem-release.yml
gem_publication:
  stage: deploy
  image: ruby:3.2.2
  variables:
    GEMSPEC_FILE: "${CI_PROJECT_NAME}.gemspec"
  before_script:
    - !reference [.install_hashicorp_vault, before_script]
    - !reference [.vault_jwt_auth, before_script]
    - export GEM_HOST_API_KEY="$(vault kv get -field=rubygems_api_key ${VAULT_KV_ENDPOINT}${ENVIRONMENT})"
    - |
      gem -v
      rm -f ./*.gem
      [ -f "${GEMSPEC_FILE}" ] || (echo "No ${GEMSPEC_FILE} file found!" && exit 1)
    - '[ -n "${GEM_HOST_API_KEY}" ] || (echo "GEM_HOST_API_KEY is not set!" && exit 1)'
  script:
    - GEM_FILE=$(echo "${CI_PROJECT_NAME}-${CI_COMMIT_TAG:1}.gem")
    - |
      gem build "${GEMSPEC_FILE}"
      [ -f "${GEM_FILE}" ] || (echo "No ${GEM_FILE} file found!" && exit 1)
    - '[ "${DISABLE_GEM_PUSH}" == "true" ] || gem push "${GEM_FILE}"'
  rules:
     - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(\.[a-zA-Z0-9]+)?$/
  artifacts:
    paths:
      - "*.gem"
  tags:
    - deploy
